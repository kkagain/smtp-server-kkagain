name: Deploy SMTP MCP Server to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mcp-server-smtp/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd mcp-server-smtp
        npm ci
    
    - name: Build project
      run: |
        cd mcp-server-smtp
        npm run build
    
    - name: Run tests
      run: |
        cd mcp-server-smtp
        npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mcp-server-smtp/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd mcp-server-smtp
        npm ci --only=production
    
    - name: Build project
      run: |
        cd mcp-server-smtp
        npm run build
    
    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          mcp-server-smtp/dist \
          mcp-server-smtp/package.json \
          mcp-server-smtp/package-lock.json \
          mcp-server-smtp/database \
          mcp-server-smtp/.env.example \
          mcp-server-smtp/Dockerfile \
          docker-compose.yml \
          README.md
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Create deployment directory
          sudo mkdir -p /opt/smtp-server
          cd /opt/smtp-server
          
          # Backup current deployment
          if [ -d "current" ]; then
            sudo mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Clone/update repository
          if [ ! -d "smtp-server-kkagain" ]; then
            sudo git clone https://github.com/${{ github.repository }}.git smtp-server-kkagain
          else
            cd smtp-server-kkagain
            sudo git fetch origin
            sudo git reset --hard origin/main
            cd ..
          fi
          
          # Create symlink to current
          sudo ln -sfn smtp-server-kkagain current
          
          # Navigate to project
          cd current/mcp-server-smtp
          
          # Install dependencies and build
          sudo npm ci --only=production
          sudo npm run build
          
          # Copy environment file if it doesn't exist
          if [ ! -f .env ]; then
            sudo cp .env.example .env
            echo "⚠️ Please update .env file with your configuration"
          fi
          
          # Create necessary directories
          sudo mkdir -p ../data ../logs ../uploads
          sudo chown -R $USER:$USER ../data ../logs ../uploads
          
          # Navigate back to root and restart services
          cd ..
          
          # Stop existing services
          sudo docker-compose down || true
          
          # Build and start services
          sudo docker-compose up -d --build
          
          # Wait for services to start
          sleep 30
          
          # Clean up old backups (keep last 5)
          cd /opt/smtp-server
          sudo ls -dt backup-* 2>/dev/null | tail -n +6 | sudo xargs rm -rf || true

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          cd /opt/smtp-server
          
          # Check if services are running
          echo "🔍 Checking service status..."
          sudo docker-compose ps
          
          # Check service logs
          echo "📋 Recent logs:"
          sudo docker-compose logs --tail=20 smtp-server
          
          # Test health endpoint
          echo "🏥 Testing health endpoint..."
          sleep 10
          
          # Try health check multiple times
          for i in {1..5}; do
            if curl -f http://localhost:4000/health; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "❌ Health check failed on attempt $i"
              if [ $i -eq 5 ]; then
                echo "💥 All health checks failed"
                sudo docker-compose logs smtp-server
                exit 1
              fi
              sleep 10
            fi
          done
          
          echo "🎉 Deployment successful!"
          echo "📊 Service URLs:"
          echo "   - API Server: http://${{ secrets.VPS_HOST }}:4000"
          echo "   - Tracking: http://${{ secrets.VPS_HOST }}:3000"
          echo "   - Health Check: http://${{ secrets.VPS_HOST }}:4000/health"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
